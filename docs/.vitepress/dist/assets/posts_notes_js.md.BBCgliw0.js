import{_ as s,c as i,o as a,a2 as t}from"./chunks/framework.RRm-Q96U.js";const E=JSON.parse('{"title":"JavaScript","description":"","frontmatter":{"prev":{"text":"Js","link":"/posts/notes/js"},"next":{"text":"Array","link":"/posts/notes/array"}},"headers":[],"relativePath":"posts/notes/js.md","filePath":"posts/notes/js.md","lastUpdated":1709043160000}'),n={name:"posts/notes/js.md"},e=t(`<h1 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h1><h2 id="导出方式" tabindex="-1">导出方式 <a class="header-anchor" href="#导出方式" aria-label="Permalink to &quot;导出方式&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //导出组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//默认导出只能导出一个 还可能导出的东西重名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //接口导出方式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchDemo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> basicservice.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;url&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { params: params })</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认第二个参数是axios的config配置项，如果想传参,使用左边的方式,和delete请求一样以字符串的形式拼接到url后面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div>`,3),h=[e];function p(l,k,r,d,o,c){return a(),i("div",null,h)}const y=s(n,[["render",p]]);export{E as __pageData,y as default};
