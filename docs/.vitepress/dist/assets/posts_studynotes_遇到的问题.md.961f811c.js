import{_ as e,c as l,o as t,b as a}from"./app.009acc7b.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"修bug","slug":"修bug","link":"#修bug","children":[{"level":3,"title":"搜索请求一般采取防抖","slug":"搜索请求一般采取防抖","link":"#搜索请求一般采取防抖","children":[]},{"level":3,"title":"今天掌握了Select框搜索与远程数据结合","slug":"今天掌握了select框搜索与远程数据结合","link":"#今天掌握了select框搜索与远程数据结合","children":[]}]},{"level":2,"title":"上传文件","slug":"上传文件","link":"#上传文件","children":[]}],"relativePath":"posts/studynotes/遇到的问题.md","lastUpdated":1675956349000}'),i={name:"posts/studynotes/遇到的问题.md"},n=a('<h2 id="修bug" tabindex="-1">修bug <a class="header-anchor" href="#修bug" aria-hidden="true">#</a></h2><hr><h3 id="搜索请求一般采取防抖" tabindex="-1">搜索请求一般采取防抖 <a class="header-anchor" href="#搜索请求一般采取防抖" aria-hidden="true">#</a></h3><ul><li>节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效(类似于传送,每隔相应的时间触发一次)</li><li>防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时类似于(回城操作被打断后重新计时)</li></ul><hr><h3 id="今天掌握了select框搜索与远程数据结合" tabindex="-1">今天掌握了Select框搜索与远程数据结合 <a class="header-anchor" href="#今天掌握了select框搜索与远程数据结合" aria-hidden="true">#</a></h3><ol><li>在onChange改变value的值。</li><li>在搜索的时候，调取接口，但是此时要注意防抖,不然请求会随着<code>input.value</code>的值改变而重复触发</li></ol><h2 id="上传文件" tabindex="-1">上传文件 <a class="header-anchor" href="#上传文件" aria-hidden="true">#</a></h2><p>最近在搞毕设,写到了后端上传图片,上传文件等功能觉得很容易。 下班的时候和冲哥交流了一下,冲个马上提出了几个问题点:</p><ul><li><p>上传文件如果取消上传,那上传的图片怎么办?</p><p>冲哥最后解答:一般上传的图片都放在一个临时文件夹,一般上传文件伴随着保存操作。在保存操作的时候 在把临时的图片保存到本该放置的文件夹里面,在伴随着保存。把文件的地址都保存到数据库中</p></li><li><p>上传一般前端和后端都需要做限制。</p><p>为什么呢？前端做出限制是因为可以放置有人刷请求，因为上传文件等是比较耗费服务器的资源。</p><p>前端：一般在上传的时候怎么做？在上传的时候可以在前端做出一些操作。比如重复刷数据的时候前端就不发请求可以避免在调取接口的时候占用无效的接口资源</p><p>后端：一般怎么做呢？也会在上传文件的时候做出限制，现比如直接跨越前端发请求，后端需要做的操作就是防止在恶意用户绕过前端的时候刷接口请求资源。</p></li></ul>',10),s=[n];function r(d,c,h,o,_,p){return t(),l("div",null,s)}const b=e(i,[["render",r]]);export{g as __pageData,b as default};
